
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 28 13:42:56 CST 2010
//----------------------------------------------------

package Parse;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 28 13:42:56 CST 2010
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\003\003\000\002\022" +
    "\002\000\002\022\004\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\025\003\000\002\025\004\000" +
    "\002\024\006\000\002\030\003\000\002\030\005\000\002" +
    "\030\005\000\002\034\002\000\002\034\003\000\002\033" +
    "\005\000\002\033\007\000\002\023\006\000\002\023\010" +
    "\000\002\027\003\000\002\027\004\000\002\026\011\000" +
    "\002\026\013\000\002\002\003\000\002\002\005\000\002" +
    "\002\003\000\002\002\006\000\002\035\006\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\010\005\000\002\010\004" +
    "\000\002\007\003\000\002\007\005\000\002\011\006\000" +
    "\002\031\002\000\002\031\003\000\002\031\005\000\002" +
    "\012\004\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\013\005\000\002\013\006\000\002\032\005\000\002\032" +
    "\007\000\002\014\005\000\002\016\005\000\002\015\006" +
    "\000\002\015\010\000\002\005\006\000\002\005\012\000" +
    "\002\017\003\000\002\020\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\030\004\017\005\022\006\007\012\015\022" +
    "\025\037\013\042\010\043\030\046\026\052\024\053\016" +
    "\001\002\000\072\002\uffda\007\uffda\010\uffda\011\uffda\013" +
    "\uffda\015\uffda\017\uffda\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\040\uffda\041\uffda\044\uffda\045\uffda\047\uffda" +
    "\050\uffda\054\uffda\055\uffda\056\uffda\001\002\000\072\002" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\013\uffdf\015\uffdf\017\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\040\uffdf" +
    "\041\uffdf\044\uffdf\045\uffdf\047\uffdf\050\uffdf\054\uffdf\055" +
    "\uffdf\056\uffdf\001\002\000\102\002\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\013\uffe8\014\uffe8\015\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\040" +
    "\uffe8\041\uffe8\044\uffe8\045\uffe8\047\uffe8\050\uffe8\051\227" +
    "\054\uffe8\055\uffe8\056\uffe8\001\002\000\072\002\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\013\uffe2\015\uffe2\017\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\040\uffe2\041\uffe2" +
    "\044\uffe2\045\uffe2\047\uffe2\050\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\001\002\000\030\004\017\005\022\006\007\012\015" +
    "\022\025\037\013\042\010\043\030\046\026\052\024\053" +
    "\016\001\002\000\034\002\000\021\050\022\043\023\054" +
    "\024\045\025\051\026\047\027\055\030\052\031\053\032" +
    "\046\033\044\034\056\001\002\000\072\002\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\013\uffd8\015\uffd8\017\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\034\uffd8\040\uffd8\041\uffd8\044" +
    "\uffd8\045\uffd8\047\uffd8\050\uffd8\054\uffd8\055\uffd8\056\uffd8" +
    "\001\002\000\030\004\017\005\022\006\007\012\015\022" +
    "\025\037\013\042\010\043\030\046\026\052\024\053\016" +
    "\001\002\000\004\002\216\001\002\000\032\004\017\005" +
    "\022\006\007\012\015\013\213\022\025\037\013\042\010" +
    "\043\030\046\026\052\024\053\016\001\002\000\072\002" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4\015\uffe4\017\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\040\uffe4" +
    "\041\uffe4\044\uffe4\045\uffe4\047\uffe4\050\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\001\002\000\104\002\uffea\007\uffea\010\uffea" +
    "\011\uffea\012\173\013\uffea\014\172\015\uffea\016\171\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\040\uffea\041\uffea\044\uffea\045\uffea\047\uffea" +
    "\050\uffea\054\uffea\055\uffea\056\uffea\001\002\000\072\002" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\013\uffdc\015\uffdc\017\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\040\uffdc" +
    "\041\uffdc\044\uffdc\045\uffdc\047\uffdc\050\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\001\002\000\072\002\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\013\uffdb\015\uffdb\017\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\040\uffdb\041\uffdb\044\uffdb\045" +
    "\uffdb\047\uffdb\050\uffdb\054\uffdb\055\uffdb\056\uffdb\001\002" +
    "\000\072\002\uffe1\007\uffe1\010\uffe1\011\uffe1\013\uffe1\015" +
    "\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\040\uffe1\041\uffe1\044\uffe1\045\uffe1\047\uffe1\050\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\001\002\000\072\002\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\013\uffe0\015\uffe0\017\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\040\uffe0\041\uffe0" +
    "\044\uffe0\045\uffe0\047\uffe0\050\uffe0\054\uffe0\055\uffe0\056" +
    "\uffe0\001\002\000\072\002\uffb7\007\uffb7\010\uffb7\011\uffb7" +
    "\013\uffb7\015\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\040\uffb7\041\uffb7\044\uffb7\045\uffb7\047" +
    "\uffb7\050\uffb7\054\uffb7\055\uffb7\056\uffb7\001\002\000\030" +
    "\004\017\005\022\006\007\012\015\022\025\037\013\042" +
    "\010\043\030\046\026\052\024\053\016\001\002\000\012" +
    "\047\uffff\054\115\055\111\056\112\001\002\000\072\002" +
    "\uffd9\007\uffd9\010\uffd9\011\uffd9\013\uffd9\015\uffd9\017\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\040\uffd9" +
    "\041\uffd9\044\uffd9\045\uffd9\047\uffd9\050\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\001\002\000\004\004\075\001\002\000\072" +
    "\002\uffde\007\uffde\010\uffde\011\uffde\013\uffde\015\uffde\017" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\040" +
    "\uffde\041\uffde\044\uffde\045\uffde\047\uffde\050\uffde\054\uffde" +
    "\055\uffde\056\uffde\001\002\000\100\002\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\013\uffe5\014\036\015\uffe5\017\uffe5\020\040" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\037" +
    "\040\uffe5\041\uffe5\044\uffe5\045\uffe5\047\uffe5\050\uffe5\054" +
    "\uffe5\055\uffe5\056\uffe5\001\002\000\072\002\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\013\uffd7\015\uffd7\017\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\040\uffd7\041\uffd7\044" +
    "\uffd7\045\uffd7\047\uffd7\050\uffd7\054\uffd7\055\uffd7\056\uffd7" +
    "\001\002\000\072\002\uffdd\007\uffdd\010\uffdd\011\uffdd\013" +
    "\uffdd\015\uffdd\017\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\040\uffdd\041\uffdd\044\uffdd\045\uffdd\047\uffdd" +
    "\050\uffdd\054\uffdd\055\uffdd\056\uffdd\001\002\000\072\002" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\015\uffe3\017\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\040\uffe3" +
    "\041\uffe3\044\uffe3\045\uffe3\047\uffe3\050\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\001\002\000\030\004\017\005\022\006\007" +
    "\012\015\022\025\037\013\042\010\043\030\046\026\052" +
    "\024\053\016\001\002\000\030\004\017\005\022\006\007" +
    "\012\015\022\025\037\013\042\010\043\030\046\026\052" +
    "\024\053\016\001\002\000\004\004\041\001\002\000\100" +
    "\002\uffe9\007\uffe9\010\uffe9\011\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\040\uffe9\041\uffe9\044\uffe9\045\uffe9" +
    "\047\uffe9\050\uffe9\054\uffe9\055\uffe9\056\uffe9\001\002\000" +
    "\072\002\uffbc\007\uffbc\010\uffbc\011\uffbc\013\uffbc\015\uffbc" +
    "\017\uffbc\021\050\022\043\023\054\024\045\025\051\026" +
    "\047\027\055\030\052\031\053\032\046\033\044\034\056" +
    "\040\uffbc\041\uffbc\044\uffbc\045\uffbc\047\uffbc\050\uffbc\054" +
    "\uffbc\055\uffbc\056\uffbc\001\002\000\030\004\017\005\022" +
    "\006\007\012\015\022\025\037\013\042\010\043\030\046" +
    "\026\052\024\053\016\001\002\000\030\004\017\005\022" +
    "\006\007\012\015\022\025\037\013\042\010\043\030\046" +
    "\026\052\024\053\016\001\002\000\030\004\017\005\022" +
    "\006\007\012\015\022\025\037\013\042\010\043\030\046" +
    "\026\052\024\053\016\001\002\000\030\004\017\005\022" +
    "\006\007\012\015\022\025\037\013\042\010\043\030\046" +
    "\026\052\024\053\016\001\002\000\030\004\017\005\022" +
    "\006\007\012\015\022\025\037\013\042\010\043\030\046" +
    "\026\052\024\053\016\001\002\000\030\004\017\005\022" +
    "\006\007\012\015\022\025\037\013\042\010\043\030\046" +
    "\026\052\024\053\016\001\002\000\030\004\017\005\022" +
    "\006\007\012\015\022\025\037\013\042\010\043\030\046" +
    "\026\052\024\053\016\001\002\000\030\004\017\005\022" +
    "\006\007\012\015\022\025\037\013\042\010\043\030\046" +
    "\026\052\024\053\016\001\002\000\030\004\017\005\022" +
    "\006\007\012\015\022\025\037\013\042\010\043\030\046" +
    "\026\052\024\053\016\001\002\000\030\004\017\005\022" +
    "\006\007\012\015\022\025\037\013\042\010\043\030\046" +
    "\026\052\024\053\016\001\002\000\030\004\017\005\022" +
    "\006\007\012\015\022\025\037\013\042\010\043\030\046" +
    "\026\052\024\053\016\001\002\000\030\004\017\005\022" +
    "\006\007\012\015\022\025\037\013\042\010\043\030\046" +
    "\026\052\024\053\016\001\002\000\072\002\uffc2\007\uffc2" +
    "\010\uffc2\011\uffc2\013\uffc2\015\uffc2\017\uffc2\021\050\022" +
    "\043\023\054\024\045\025\051\026\047\027\055\030\052" +
    "\031\053\032\046\033\044\034\uffc2\040\uffc2\041\uffc2\044" +
    "\uffc2\045\uffc2\047\uffc2\050\uffc2\054\uffc2\055\uffc2\056\uffc2" +
    "\001\002\000\056\002\uffc6\007\uffc6\010\uffc6\011\uffc6\013" +
    "\uffc6\015\uffc6\017\uffc6\021\050\022\043\023\054\024\045" +
    "\033\uffc6\034\uffc6\040\uffc6\041\uffc6\044\uffc6\045\uffc6\047" +
    "\uffc6\050\uffc6\054\uffc6\055\uffc6\056\uffc6\001\002\000\072" +
    "\002\uffcb\007\uffcb\010\uffcb\011\uffcb\013\uffcb\015\uffcb\017" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\040" +
    "\uffcb\041\uffcb\044\uffcb\045\uffcb\047\uffcb\050\uffcb\054\uffcb" +
    "\055\uffcb\056\uffcb\001\002\000\056\002\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\013\uffc7\015\uffc7\017\uffc7\021\050\022\043" +
    "\023\054\024\045\033\uffc7\034\uffc7\040\uffc7\041\uffc7\044" +
    "\uffc7\045\uffc7\047\uffc7\050\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\001\002\000\056\002\uffc4\007\uffc4\010\uffc4\011\uffc4\013" +
    "\uffc4\015\uffc4\017\uffc4\021\050\022\043\023\054\024\045" +
    "\033\uffc4\034\uffc4\040\uffc4\041\uffc4\044\uffc4\045\uffc4\047" +
    "\uffc4\050\uffc4\054\uffc4\055\uffc4\056\uffc4\001\002\000\056" +
    "\002\uffc9\007\uffc9\010\uffc9\011\uffc9\013\uffc9\015\uffc9\017" +
    "\uffc9\021\050\022\043\023\054\024\045\033\uffc9\034\uffc9" +
    "\040\uffc9\041\uffc9\044\uffc9\045\uffc9\047\uffc9\050\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\001\002\000\072\002\uffcd\007\uffcd" +
    "\010\uffcd\011\uffcd\013\uffcd\015\uffcd\017\uffcd\021\uffcd\022" +
    "\uffcd\023\054\024\045\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\040\uffcd\041\uffcd\044" +
    "\uffcd\045\uffcd\047\uffcd\050\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\001\002\000\056\002\uffc8\007\uffc8\010\uffc8\011\uffc8\013" +
    "\uffc8\015\uffc8\017\uffc8\021\050\022\043\023\054\024\045" +
    "\033\uffc8\034\uffc8\040\uffc8\041\uffc8\044\uffc8\045\uffc8\047" +
    "\uffc8\050\uffc8\054\uffc8\055\uffc8\056\uffc8\001\002\000\056" +
    "\002\uffc5\007\uffc5\010\uffc5\011\uffc5\013\uffc5\015\uffc5\017" +
    "\uffc5\021\050\022\043\023\054\024\045\033\uffc5\034\uffc5" +
    "\040\uffc5\041\uffc5\044\uffc5\045\uffc5\047\uffc5\050\uffc5\054" +
    "\uffc5\055\uffc5\056\uffc5\001\002\000\072\002\uffca\007\uffca" +
    "\010\uffca\011\uffca\013\uffca\015\uffca\017\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\040\uffca\041\uffca\044" +
    "\uffca\045\uffca\047\uffca\050\uffca\054\uffca\055\uffca\056\uffca" +
    "\001\002\000\072\002\uffc3\007\uffc3\010\uffc3\011\uffc3\013" +
    "\uffc3\015\uffc3\017\uffc3\021\050\022\043\023\054\024\045" +
    "\025\051\026\047\027\055\030\052\031\053\032\046\033" +
    "\uffc3\034\uffc3\040\uffc3\041\uffc3\044\uffc3\045\uffc3\047\uffc3" +
    "\050\uffc3\054\uffc3\055\uffc3\056\uffc3\001\002\000\072\002" +
    "\uffcc\007\uffcc\010\uffcc\011\uffcc\013\uffcc\015\uffcc\017\uffcc" +
    "\021\uffcc\022\uffcc\023\054\024\045\025\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\040\uffcc" +
    "\041\uffcc\044\uffcc\045\uffcc\047\uffcc\050\uffcc\054\uffcc\055" +
    "\uffcc\056\uffcc\001\002\000\034\015\074\021\050\022\043" +
    "\023\054\024\045\025\051\026\047\027\055\030\052\031" +
    "\053\032\046\033\044\034\056\001\002\000\100\002\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\013\uffe7\014\uffe7\015\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\040\uffe7\041\uffe7\044\uffe7\045\uffe7\047\uffe7" +
    "\050\uffe7\054\uffe7\055\uffe7\056\uffe7\001\002\000\004\035" +
    "\076\001\002\000\030\004\017\005\022\006\007\012\015" +
    "\022\025\037\013\042\010\043\030\046\026\052\024\053" +
    "\016\001\002\000\034\021\050\022\043\023\054\024\045" +
    "\025\051\026\047\027\055\030\052\031\053\032\046\033" +
    "\044\034\056\044\100\001\002\000\030\004\017\005\022" +
    "\006\007\012\015\022\025\037\013\042\010\043\030\046" +
    "\026\052\024\053\016\001\002\000\034\021\050\022\043" +
    "\023\054\024\045\025\051\026\047\027\055\030\052\031" +
    "\053\032\046\033\044\034\056\045\102\001\002\000\030" +
    "\004\017\005\022\006\007\012\015\022\025\037\013\042" +
    "\010\043\030\046\026\052\024\053\016\001\002\000\072" +
    "\002\uffb8\007\uffb8\010\uffb8\011\uffb8\013\uffb8\015\uffb8\017" +
    "\uffb8\021\050\022\043\023\054\024\045\025\051\026\047" +
    "\027\055\030\052\031\053\032\046\033\044\034\056\040" +
    "\uffb8\041\uffb8\044\uffb8\045\uffb8\047\uffb8\050\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\001\002\000\012\047\ufffb\054\ufffb\055" +
    "\ufffb\056\ufffb\001\002\000\012\047\uffff\054\115\055\111" +
    "\056\112\001\002\000\012\047\ufffc\054\ufffc\055\ufffc\056" +
    "\ufffc\001\002\000\004\047\161\001\002\000\012\047\ufffd" +
    "\054\ufffd\055\ufffd\056\ufffd\001\002\000\004\004\152\001" +
    "\002\000\004\004\140\001\002\000\012\047\ufffa\054\ufffa" +
    "\055\ufffa\056\112\001\002\000\012\047\uffee\054\115\055" +
    "\uffee\056\uffee\001\002\000\004\004\116\001\002\000\004" +
    "\012\117\001\002\000\006\004\120\013\ufff4\001\002\000" +
    "\004\010\132\001\002\000\004\013\123\001\002\000\006" +
    "\013\ufff3\017\ufff3\001\002\000\006\010\125\025\124\001" +
    "\002\000\030\004\017\005\022\006\007\012\015\022\025" +
    "\037\013\042\010\043\030\046\026\052\024\053\016\001" +
    "\002\000\004\004\126\001\002\000\004\025\127\001\002" +
    "\000\030\004\017\005\022\006\007\012\015\022\025\037" +
    "\013\042\010\043\030\046\026\052\024\053\016\001\002" +
    "\000\042\021\050\022\043\023\054\024\045\025\051\026" +
    "\047\027\055\030\052\031\053\032\046\033\044\034\056" +
    "\047\uffeb\054\uffeb\055\uffeb\056\uffeb\001\002\000\042\021" +
    "\050\022\043\023\054\024\045\025\051\026\047\027\055" +
    "\030\052\031\053\032\046\033\044\034\056\047\uffec\054" +
    "\uffec\055\uffec\056\uffec\001\002\000\004\004\133\001\002" +
    "\000\010\007\134\013\ufff2\017\ufff2\001\002\000\004\004" +
    "\120\001\002\000\006\013\ufff1\017\ufff1\001\002\000\012" +
    "\047\uffed\054\uffed\055\uffed\056\uffed\001\002\000\012\047" +
    "\ufff9\054\ufff9\055\ufff9\056\ufff9\001\002\000\004\025\141" +
    "\001\002\000\010\004\143\016\144\036\145\001\002\000" +
    "\012\047\ufff8\054\ufff8\055\ufff8\056\ufff8\001\002\000\012" +
    "\047\ufff7\054\ufff7\055\ufff7\056\ufff7\001\002\000\006\004" +
    "\120\017\ufff4\001\002\000\004\051\146\001\002\000\004" +
    "\004\147\001\002\000\012\047\ufff5\054\ufff5\055\ufff5\056" +
    "\ufff5\001\002\000\004\017\151\001\002\000\012\047\ufff6" +
    "\054\ufff6\055\ufff6\056\ufff6\001\002\000\006\010\153\035" +
    "\154\001\002\000\004\004\156\001\002\000\030\004\017" +
    "\005\022\006\007\012\015\022\025\037\013\042\010\043" +
    "\030\046\026\052\024\053\016\001\002\000\042\021\050" +
    "\022\043\023\054\024\045\025\051\026\047\027\055\030" +
    "\052\031\053\032\046\033\044\034\056\047\ufff0\054\ufff0" +
    "\055\ufff0\056\ufff0\001\002\000\004\035\157\001\002\000" +
    "\030\004\017\005\022\006\007\012\015\022\025\037\013" +
    "\042\010\043\030\046\026\052\024\053\016\001\002\000" +
    "\042\021\050\022\043\023\054\024\045\025\051\026\047" +
    "\027\055\030\052\031\053\032\046\033\044\034\056\047" +
    "\uffef\054\uffef\055\uffef\056\uffef\001\002\000\030\004\017" +
    "\005\022\006\007\012\015\022\025\037\013\042\010\043" +
    "\030\046\026\052\024\053\016\001\002\000\040\011\165" +
    "\013\uffd4\021\050\022\043\023\054\024\045\025\051\026" +
    "\047\027\055\030\052\031\053\032\046\033\044\034\056" +
    "\050\uffd4\001\002\000\004\050\164\001\002\000\072\002" +
    "\uffb6\007\uffb6\010\uffb6\011\uffb6\013\uffb6\015\uffb6\017\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\040\uffb6" +
    "\041\uffb6\044\uffb6\045\uffb6\047\uffb6\050\uffb6\054\uffb6\055" +
    "\uffb6\056\uffb6\001\002\000\030\004\017\005\022\006\007" +
    "\012\015\022\025\037\013\042\010\043\030\046\026\052" +
    "\024\053\016\001\002\000\006\013\uffd3\050\uffd3\001\002" +
    "\000\004\047\ufffe\001\002\000\072\002\uffce\007\uffce\010" +
    "\uffce\011\uffce\013\uffce\015\uffce\017\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\040\uffce\041\uffce\044\uffce" +
    "\045\uffce\047\uffce\050\uffce\054\uffce\055\uffce\056\uffce\001" +
    "\002\000\006\004\203\017\204\001\002\000\030\004\017" +
    "\005\022\006\007\012\015\022\025\037\013\042\010\043" +
    "\030\046\026\052\024\053\016\001\002\000\032\004\017" +
    "\005\022\006\007\012\015\013\uffd1\022\025\037\013\042" +
    "\010\043\030\046\026\052\024\053\016\001\002\000\036" +
    "\010\177\013\uffd0\021\050\022\043\023\054\024\045\025" +
    "\051\026\047\027\055\030\052\031\053\032\046\033\044" +
    "\034\056\001\002\000\004\013\176\001\002\000\072\002" +
    "\uffd2\007\uffd2\010\uffd2\011\uffd2\013\uffd2\015\uffd2\017\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\040\uffd2" +
    "\041\uffd2\044\uffd2\045\uffd2\047\uffd2\050\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\001\002\000\032\004\017\005\022\006\007" +
    "\012\015\013\uffd1\022\025\037\013\042\010\043\030\046" +
    "\026\052\024\053\016\001\002\000\004\013\uffcf\001\002" +
    "\000\034\015\202\021\050\022\043\023\054\024\045\025" +
    "\051\026\047\027\055\030\052\031\053\032\046\033\044" +
    "\034\056\001\002\000\102\002\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\040\uffe6" +
    "\041\uffe6\044\uffe6\045\uffe6\047\uffe6\050\uffe6\051\uffe6\054" +
    "\uffe6\055\uffe6\056\uffe6\001\002\000\004\025\207\001\002" +
    "\000\072\002\uffc1\007\uffc1\010\uffc1\011\uffc1\013\uffc1\015" +
    "\uffc1\017\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\040\uffc1\041\uffc1\044\uffc1\045\uffc1\047\uffc1\050\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\001\002\000\004\017\206\001" +
    "\002\000\072\002\uffc0\007\uffc0\010\uffc0\011\uffc0\013\uffc0" +
    "\015\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\040\uffc0\041\uffc0\044\uffc0\045\uffc0\047\uffc0\050" +
    "\uffc0\054\uffc0\055\uffc0\056\uffc0\001\002\000\030\004\017" +
    "\005\022\006\007\012\015\022\025\037\013\042\010\043" +
    "\030\046\026\052\024\053\016\001\002\000\036\007\211" +
    "\017\uffbf\021\050\022\043\023\054\024\045\025\051\026" +
    "\047\027\055\030\052\031\053\032\046\033\044\034\056" +
    "\001\002\000\004\004\203\001\002\000\004\017\uffbe\001" +
    "\002\000\072\002\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5" +
    "\015\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\040\uffd5\041\uffd5\044\uffd5\045\uffd5\047\uffd5\050" +
    "\uffd5\054\uffd5\055\uffd5\056\uffd5\001\002\000\004\013\215" +
    "\001\002\000\072\002\uffd6\007\uffd6\010\uffd6\011\uffd6\013" +
    "\uffd6\015\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\040\uffd6\041\uffd6\044\uffd6\045\uffd6\047\uffd6" +
    "\050\uffd6\054\uffd6\055\uffd6\056\uffd6\001\002\000\004\002" +
    "\001\001\002\000\034\021\050\022\043\023\054\024\045" +
    "\025\051\026\047\027\055\030\052\031\053\032\046\033" +
    "\044\034\056\040\220\001\002\000\030\004\017\005\022" +
    "\006\007\012\015\022\025\037\013\042\010\043\030\046" +
    "\026\052\024\053\016\001\002\000\072\002\uffbb\007\uffbb" +
    "\010\uffbb\011\uffbb\013\uffbb\015\uffbb\017\uffbb\021\050\022" +
    "\043\023\054\024\045\025\051\026\047\027\055\030\052" +
    "\031\053\032\046\033\044\034\056\040\uffbb\041\222\044" +
    "\uffbb\045\uffbb\047\uffbb\050\uffbb\054\uffbb\055\uffbb\056\uffbb" +
    "\001\002\000\030\004\017\005\022\006\007\012\015\022" +
    "\025\037\013\042\010\043\030\046\026\052\024\053\016" +
    "\001\002\000\072\002\uffba\007\uffba\010\uffba\011\uffba\013" +
    "\uffba\015\uffba\017\uffba\021\050\022\043\023\054\024\045" +
    "\025\051\026\047\027\055\030\052\031\053\032\046\033" +
    "\044\034\056\040\uffba\041\uffba\044\uffba\045\uffba\047\uffba" +
    "\050\uffba\054\uffba\055\uffba\056\uffba\001\002\000\034\021" +
    "\050\022\043\023\054\024\045\025\051\026\047\027\055" +
    "\030\052\031\053\032\046\033\044\034\056\045\225\001" +
    "\002\000\030\004\017\005\022\006\007\012\015\022\025" +
    "\037\013\042\010\043\030\046\026\052\024\053\016\001" +
    "\002\000\072\002\uffb9\007\uffb9\010\uffb9\011\uffb9\013\uffb9" +
    "\015\uffb9\017\uffb9\021\050\022\043\023\054\024\045\025" +
    "\051\026\047\027\055\030\052\031\053\032\046\033\044" +
    "\034\056\040\uffb9\041\uffb9\044\uffb9\045\uffb9\047\uffb9\050" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\001\002\000\030\004\017" +
    "\005\022\006\007\012\015\022\025\037\013\042\010\043" +
    "\030\046\026\052\024\053\016\001\002\000\072\002\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\013\uffbd\015\uffbd\017\uffbd\021" +
    "\050\022\043\023\054\024\045\025\051\026\047\027\055" +
    "\030\052\031\053\032\046\033\044\034\056\040\uffbd\041" +
    "\uffbd\044\uffbd\045\uffbd\047\uffbd\050\uffbd\054\uffbd\055\uffbd" +
    "\056\uffbd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\040\002\031\003\013\004\010\005\026\006" +
    "\030\010\034\011\022\012\004\013\033\014\017\015\003" +
    "\016\020\017\011\020\032\035\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\002\031\004\223\005\026\006\030\010\034\011" +
    "\022\012\004\013\033\014\017\015\003\016\020\017\011" +
    "\020\032\035\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\002\031\004\216\005\026\006\030\010\034" +
    "\011\022\012\004\013\033\014\017\015\003\016\020\017" +
    "\011\020\032\035\005\001\001\000\002\001\001\000\040" +
    "\002\031\004\161\005\026\006\030\007\213\010\034\011" +
    "\022\012\004\013\033\014\017\015\003\016\020\017\011" +
    "\020\032\035\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\002\031\004" +
    "\167\005\026\006\030\010\034\011\022\012\004\013\033" +
    "\014\017\015\003\016\020\017\011\020\032\035\005\001" +
    "\001\000\020\021\104\022\106\023\105\024\112\025\107" +
    "\026\113\027\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\002\031\004" +
    "\072\005\026\006\030\010\034\011\022\012\004\013\033" +
    "\014\017\015\003\016\020\017\011\020\032\035\005\001" +
    "\001\000\036\002\031\004\041\005\026\006\030\010\034" +
    "\011\022\012\004\013\033\014\017\015\003\016\020\017" +
    "\011\020\032\035\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\002\031\004\071\005" +
    "\026\006\030\010\034\011\022\012\004\013\033\014\017" +
    "\015\003\016\020\017\011\020\032\035\005\001\001\000" +
    "\036\002\031\004\070\005\026\006\030\010\034\011\022" +
    "\012\004\013\033\014\017\015\003\016\020\017\011\020" +
    "\032\035\005\001\001\000\036\002\031\004\067\005\026" +
    "\006\030\010\034\011\022\012\004\013\033\014\017\015" +
    "\003\016\020\017\011\020\032\035\005\001\001\000\036" +
    "\002\031\004\066\005\026\006\030\010\034\011\022\012" +
    "\004\013\033\014\017\015\003\016\020\017\011\020\032" +
    "\035\005\001\001\000\036\002\031\004\065\005\026\006" +
    "\030\010\034\011\022\012\004\013\033\014\017\015\003" +
    "\016\020\017\011\020\032\035\005\001\001\000\036\002" +
    "\031\004\064\005\026\006\030\010\034\011\022\012\004" +
    "\013\033\014\017\015\003\016\020\017\011\020\032\035" +
    "\005\001\001\000\036\002\031\004\063\005\026\006\030" +
    "\010\034\011\022\012\004\013\033\014\017\015\003\016" +
    "\020\017\011\020\032\035\005\001\001\000\036\002\031" +
    "\004\062\005\026\006\030\010\034\011\022\012\004\013" +
    "\033\014\017\015\003\016\020\017\011\020\032\035\005" +
    "\001\001\000\036\002\031\004\061\005\026\006\030\010" +
    "\034\011\022\012\004\013\033\014\017\015\003\016\020" +
    "\017\011\020\032\035\005\001\001\000\036\002\031\004" +
    "\060\005\026\006\030\010\034\011\022\012\004\013\033" +
    "\014\017\015\003\016\020\017\011\020\032\035\005\001" +
    "\001\000\036\002\031\004\057\005\026\006\030\010\034" +
    "\011\022\012\004\013\033\014\017\015\003\016\020\017" +
    "\011\020\032\035\005\001\001\000\036\002\031\004\056" +
    "\005\026\006\030\010\034\011\022\012\004\013\033\014" +
    "\017\015\003\016\020\017\011\020\032\035\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\002\031\004" +
    "\076\005\026\006\030\010\034\011\022\012\004\013\033" +
    "\014\017\015\003\016\020\017\011\020\032\035\005\001" +
    "\001\000\002\001\001\000\036\002\031\004\100\005\026" +
    "\006\030\010\034\011\022\012\004\013\033\014\017\015" +
    "\003\016\020\017\011\020\032\035\005\001\001\000\002" +
    "\001\001\000\036\002\031\004\102\005\026\006\030\010" +
    "\034\011\022\012\004\013\033\014\017\015\003\016\020" +
    "\017\011\020\032\035\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\021\104\022\166\023\105\024\112" +
    "\025\107\026\113\027\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\112\025\136\001\001\000\006\026" +
    "\113\027\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\121\034\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\002\031\004\130\005\026\006\030\010\034\011\022\012" +
    "\004\013\033\014\017\015\003\016\020\017\011\020\032" +
    "\035\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\002\031\004\127\005\026\006\030\010\034\011\022" +
    "\012\004\013\033\014\017\015\003\016\020\017\011\020" +
    "\032\035\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\121\034\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\002\031\004\154\005\026\006\030\010" +
    "\034\011\022\012\004\013\033\014\017\015\003\016\020" +
    "\017\011\020\032\035\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\002\031\004\157\005\026\006\030" +
    "\010\034\011\022\012\004\013\033\014\017\015\003\016" +
    "\020\017\011\020\032\035\005\001\001\000\002\001\001" +
    "\000\040\002\031\004\161\005\026\006\030\007\162\010" +
    "\034\011\022\012\004\013\033\014\017\015\003\016\020" +
    "\017\011\020\032\035\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\002\031\004\161" +
    "\005\026\006\030\007\165\010\034\011\022\012\004\013" +
    "\033\014\017\015\003\016\020\017\011\020\032\035\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\204\001\001\000\036\002\031\004\200" +
    "\005\026\006\030\010\034\011\022\012\004\013\033\014" +
    "\017\015\003\016\020\017\011\020\032\035\005\001\001" +
    "\000\040\002\031\004\173\005\026\006\030\010\034\011" +
    "\022\012\004\013\033\014\017\015\003\016\020\017\011" +
    "\020\032\031\174\035\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\002\031\004\173" +
    "\005\026\006\030\010\034\011\022\012\004\013\033\014" +
    "\017\015\003\016\020\017\011\020\032\031\177\035\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\002\031\004\207\005\026\006" +
    "\030\010\034\011\022\012\004\013\033\014\017\015\003" +
    "\016\020\017\011\020\032\035\005\001\001\000\002\001" +
    "\001\000\004\032\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\002\031\004\220\005\026" +
    "\006\030\010\034\011\022\012\004\013\033\014\017\015" +
    "\003\016\020\017\011\020\032\035\005\001\001\000\002" +
    "\001\001\000\036\002\031\004\222\005\026\006\030\010" +
    "\034\011\022\012\004\013\033\014\017\015\003\016\020" +
    "\017\011\020\032\035\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\002\031\004\225\005\026\006\030" +
    "\010\034\011\022\012\004\013\033\014\017\015\003\016" +
    "\020\017\011\020\032\035\005\001\001\000\002\001\001" +
    "\000\036\002\031\004\227\005\026\006\030\010\034\011" +
    "\022\012\004\013\033\014\017\015\003\016\020\017\011" +
    "\020\032\035\005\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 
       static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	   }
       
       class X {
             int pos;
             Symbol.Symbol id;
             Absyn.Exp e;
             X(int _pos, Symbol.Symbol _id, Absyn.Exp _e) {
                   pos = _pos;
                   e = _e;
                   id = _id;
             }
       }

  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // let_exp ::= LET decs IN expseq END 
            {
              Absyn.LetExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.DecList ds = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.SeqExp es = (Absyn.SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.LetExp(lleft, ds, es); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("let_exp",14, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // jump_exp ::= BREAK 
            {
              Absyn.BreakExp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.BreakExp(bleft); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("jump_exp",13, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // iteration_exp ::= FOR ID ASSIGN exp TO exp DO exp 
            {
              Absyn.Exp RESULT =null;
		int for_left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int for_right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		Object for_ = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e3 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.ForExp(for_left, new Absyn.VarDec(idleft, sym(id), null, e1),  e2, e3); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("iteration_exp",3, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // iteration_exp ::= WHILE exp DO exp 
            {
              Absyn.Exp RESULT =null;
		int while_left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int while_right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object while_ = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.WhileExp(while_left, e1, e2); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("iteration_exp",3, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // selection_exp ::= IF exp THEN exp ELSE exp 
            {
              Absyn.IfExp RESULT =null;
		int if_left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object if_ = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e3 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.IfExp(if_left, e1, e2, e3); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("selection_exp",11, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // selection_exp ::= IF exp THEN exp 
            {
              Absyn.IfExp RESULT =null;
		int if_left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object if_ = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.IfExp(if_left, e1, e2); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("selection_exp",11, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assignment_exp ::= lvalue ASSIGN exp 
            {
              Absyn.AssignExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Var l = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.AssignExp(lleft, l, e); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("assignment_exp",12, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // array_creation ::= X OF exp 
            {
              Absyn.ArrayExp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		X x = (X)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.ArrayExp(x.pos, x.id, x.e, e); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("array_creation",10, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // record_list ::= ID EQ exp COMMA record_list 
            {
              Absyn.FieldExpList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.FieldExpList list = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.FieldExpList(eqleft, sym(id), e, list); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("record_list",24, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // record_list ::= ID EQ exp 
            {
              Absyn.FieldExpList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.FieldExpList(eqleft, sym(id), e, null); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("record_list",24, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // record_creation ::= ID LBRACE record_list RBRACE 
            {
              Absyn.RecordExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldExpList fds = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.RecordExp(idleft, sym(id), fds); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("record_creation",9, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // record_creation ::= ID LBRACE RBRACE 
            {
              Absyn.RecordExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new Absyn.RecordExp(idleft, sym(id), null); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("record_creation",9, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // binary_exp ::= exp OR exp 
            {
              Absyn.Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.IfExp(e1left, e1, new Absyn.IntExp(-1, 1), e2); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("binary_exp",4, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // binary_exp ::= exp AND exp 
            {
              Absyn.Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.IfExp(e1left, e1, e2, new Absyn.IntExp(-1, 0)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("binary_exp",4, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // binary_exp ::= exp LE exp 
            {
              Absyn.Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.OpExp(leleft, e1, Absyn.OpExp.LE, e2); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("binary_exp",4, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // binary_exp ::= exp GE exp 
            {
              Absyn.Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int geleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int geright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object ge = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.OpExp(geleft, e1, Absyn.OpExp.GE, e2); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("binary_exp",4, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // binary_exp ::= exp LT exp 
            {
              Absyn.Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.OpExp(ltleft, e1, Absyn.OpExp.LT, e2); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("binary_exp",4, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // binary_exp ::= exp GT exp 
            {
              Absyn.Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int gtleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.OpExp(gtleft, e1, Absyn.OpExp.GT, e2); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("binary_exp",4, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // binary_exp ::= exp NEQ exp 
            {
              Absyn.Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int neqleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int neqright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object neq = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.OpExp(neqleft, e1, Absyn.OpExp.NE, e2); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("binary_exp",4, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // binary_exp ::= exp EQ exp 
            {
              Absyn.Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.OpExp(eqleft, e1, Absyn.OpExp.EQ, e2); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("binary_exp",4, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // binary_exp ::= exp DIVIDE exp 
            {
              Absyn.Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int divleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.OpExp(divleft, e1, Absyn.OpExp.DIV, e2); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("binary_exp",4, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // binary_exp ::= exp TIMES exp 
            {
              Absyn.Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int timesleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int timesright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object times = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.OpExp(timesleft, e1, Absyn.OpExp.MUL, e2); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("binary_exp",4, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // binary_exp ::= exp MINUS exp 
            {
              Absyn.Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int minusleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.OpExp(minusleft, e1, Absyn.OpExp.MINUS, e2); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("binary_exp",4, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // binary_exp ::= exp PLUS exp 
            {
              Absyn.Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int plusleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.OpExp(plusleft, e1, Absyn.OpExp.PLUS, e2); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("binary_exp",4, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unary_exp ::= MINUS exp 
            {
              Absyn.OpExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.OpExp(eleft,
                          new Absyn.IntExp(eleft, 0),
                          Absyn.OpExp.MINUS, e); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("unary_exp",8, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // argument_list ::= exp COLON argument_list 
            {
              Absyn.ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.ExpList args = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.ExpList(e, args); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("argument_list",23, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // argument_list ::= exp 
            {
              Absyn.ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.ExpList(e, null); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("argument_list",23, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // argument_list ::= 
            {
              Absyn.ExpList RESULT =null;
		 RESULT = null; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("argument_list",23, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // funcall ::= ID LPAREN argument_list RPAREN 
            {
              Absyn.CallExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList args = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.CallExp(idleft, sym(id), args); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("funcall",7, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expseq ::= exp SEMICOLON expseq 
            {
              Absyn.SeqExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.SeqExp es = (Absyn.SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.SeqExp(eleft, new Absyn.ExpList(e, es.list)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("expseq",5, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expseq ::= exp 
            {
              Absyn.SeqExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.SeqExp(eleft, new Absyn.ExpList(e, null)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("expseq",5, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // block_exp ::= LPAREN RPAREN 
            {
              Absyn.SeqExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SeqExp(lleft, null); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("block_exp",6, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // block_exp ::= LPAREN expseq RPAREN 
            {
              Absyn.SeqExp RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.SeqExp es = (Absyn.SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = es; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("block_exp",6, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= let_exp 
            {
              Absyn.Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.LetExp l = (Absyn.LetExp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = l; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= jump_exp 
            {
              Absyn.Exp RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.BreakExp j = (Absyn.BreakExp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = j; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= iteration_exp 
            {
              Absyn.Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp i = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = i; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= selection_exp 
            {
              Absyn.Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.IfExp s = (Absyn.IfExp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = s; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= assignment_exp 
            {
              Absyn.Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.AssignExp a = (Absyn.AssignExp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = a; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= array_creation 
            {
              Absyn.Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.ArrayExp a = (Absyn.ArrayExp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = a; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= record_creation 
            {
              Absyn.Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.RecordExp r = (Absyn.RecordExp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = r; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= binary_exp 
            {
              Absyn.Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp b = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = b; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= unary_exp 
            {
              Absyn.Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.OpExp u = (Absyn.OpExp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = u; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= funcall 
            {
              Absyn.Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.CallExp f = (Absyn.CallExp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = f; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= STRING 
            {
              Absyn.Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.StringExp(sleft, s); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= INT 
            {
              Absyn.Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.IntExp(nleft, n); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= block_exp 
            {
              Absyn.Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.SeqExp e = (Absyn.SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = e; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= NIL 
            {
              Absyn.Exp RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Object nil = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.NilExp(nilleft); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= lvalue 
            {
              Absyn.Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Var l = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.VarExp(l.pos, l); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // X ::= ID LBRACK exp RBRACK 
            {
              X RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new X(idleft, sym(id), e); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("X",27, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lvalue ::= lvalue LBRACK exp RBRACK 
            {
              Absyn.Var RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Var l = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(lleft, l, e); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("lvalue",0, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lvalue ::= X 
            {
              Absyn.Var RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		X x = (X)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.SubscriptVar(xleft, new Absyn.SimpleVar(x.pos, x.id), x.e); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("lvalue",0, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lvalue ::= lvalue DOT ID 
            {
              Absyn.Var RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Var l = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.FieldVar(lleft, l, sym(id)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("lvalue",0, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lvalue ::= ID 
            {
              Absyn.Var RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.SimpleVar(idleft, sym(id)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("lvalue",0, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // fundec ::= FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp 
            {
              Absyn.FunctionDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Absyn.FieldList fds = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.FunctionDec(idleft, sym(id), fds, 
                       new Absyn.NameTy(tyidleft, sym(tyid)), e, null); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("fundec",20, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fundec ::= FUNCTION ID LPAREN tyfields RPAREN EQ exp 
            {
              Absyn.FunctionDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.FieldList fds = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.FunctionDec(idleft, sym(id), fds, null, e, null); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("fundec",20, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fundecs ::= fundec fundecs 
            {
              Absyn.FunctionDec RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FunctionDec f = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.FunctionDec fs = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.FunctionDec(f.pos, f.name, f.params, f.result, f.body, fs); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("fundecs",21, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fundecs ::= fundec 
            {
              Absyn.FunctionDec RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.FunctionDec f = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = f; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("fundecs",21, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vardec ::= VAR ID COLON ID ASSIGN exp 
            {
              Absyn.VarDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.VarDec(idleft, sym(id), new Absyn.NameTy(tyidleft, sym(tyid)), e); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("vardec",17, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vardec ::= VAR ID ASSIGN exp 
            {
              Absyn.VarDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.VarDec(idleft, sym(id), null, e); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("vardec",17, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tyfieldlist ::= ID COLON ID COMMA tyfieldlist 
            {
              Absyn.FieldList RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.FieldList fds = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.FieldList(cleft, sym(id1), sym(id2), fds); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("tyfieldlist",25, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tyfieldlist ::= ID COLON ID 
            {
              Absyn.FieldList RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.FieldList(cleft, sym(id1), sym(id2), null); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("tyfieldlist",25, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tyfields ::= tyfieldlist 
            {
              Absyn.FieldList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.FieldList f = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = f; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("tyfields",26, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tyfields ::= 
            {
              Absyn.FieldList RESULT =null;
		 RESULT = null; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("tyfields",26, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ty ::= ARRAY OF ID 
            {
              Absyn.Ty RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.ArrayTy(idleft, sym(id)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("ty",22, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ty ::= LBRACE tyfields RBRACE 
            {
              Absyn.Ty RESULT =null;
		int lbraceleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lbraceright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object lbrace = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldList f = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.RecordTy(lbraceleft, f); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("ty",22, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ty ::= ID 
            {
              Absyn.Ty RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.NameTy(idleft, sym(id)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("ty",22, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tydec ::= TYPE ID EQ ty 
            {
              Absyn.TypeDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Ty ty = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.TypeDec(idleft, sym(id), ty, null); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("tydec",18, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tydecs ::= tydec tydecs 
            {
              Absyn.TypeDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.TypeDec t = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.TypeDec ts = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.TypeDec(t.pos, t.name, t.ty, ts); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("tydecs",19, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tydecs ::= tydec 
            {
              Absyn.TypeDec RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.TypeDec ty = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = ty; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("tydecs",19, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec ::= fundecs 
            {
              Absyn.Dec RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.FunctionDec d = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = d; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("dec",15, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec ::= vardec 
            {
              Absyn.Dec RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.VarDec d = (Absyn.VarDec)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = d; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("dec",15, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec ::= tydecs 
            {
              Absyn.Dec RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.TypeDec d = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = d; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("dec",15, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decs ::= dec decs 
            {
              Absyn.DecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Dec d = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.DecList ds = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Absyn.DecList(d, ds); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("decs",16, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decs ::= 
            {
              Absyn.DecList RESULT =null;
		 RESULT = null; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("decs",16, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= exp 
            {
              Absyn.Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = e; 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp start_val = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

